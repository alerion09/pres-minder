---
import AppLayout from "@/layouts/AppLayout.astro";
import { IdeasView } from "@/components/ideas/IdeasView";
import type { GetIdeasQueryParams, IdeaSource } from "@/types";

export const prerender = false;

// Parse query parameters
const url = Astro.url;

const page = parseInt(url.searchParams.get("page") || "1");
const limit = parseInt(url.searchParams.get("limit") || "6");
const sort = (url.searchParams.get("sort") as GetIdeasQueryParams["sort"]) || "created_at";
const order = (url.searchParams.get("order") as GetIdeasQueryParams["order"]) || "desc";
const relationIdParam = url.searchParams.get("relation_id");
const occasionIdParam = url.searchParams.get("occasion_id");
const relationId = relationIdParam ? parseInt(relationIdParam) : undefined;
const occasionId = occasionIdParam ? parseInt(occasionIdParam) : undefined;
const source = url.searchParams.get("source") as IdeaSource | undefined;

// Fetch data from API
const baseUrl = url.origin;

// Build query string for ideas
const ideasParams = new URLSearchParams({
  page: page.toString(),
  limit: limit.toString(),
  sort,
  order,
});

if (relationId) ideasParams.set("relation_id", relationId.toString());
if (occasionId) ideasParams.set("occasion_id", occasionId.toString());
if (source) ideasParams.set("source", source);

// Fetch relations, occasions, and ideas in parallel
const [relationsRes, occasionsRes, ideasRes] = await Promise.all([
  fetch(`${baseUrl}/api/relations`),
  fetch(`${baseUrl}/api/occasions`),
  fetch(`${baseUrl}/api/ideas?${ideasParams.toString()}`),
]);

// Handle errors
if (!relationsRes.ok || !occasionsRes.ok || !ideasRes.ok) {
  throw new Error("Failed to fetch data");
}

const { data: relations } = await relationsRes.json();
const { data: occasions } = await occasionsRes.json();
const ideasData = await ideasRes.json();

// Get user ID from environment
const userId = import.meta.env.SUPABASE_UUID;

// Prepare initial state for client
const initialState = {
  ideas: ideasData.data || [],
  pagination: ideasData.pagination,
  relations,
  occasions,
  filters: {
    page,
    limit,
    sort,
    order,
    relationId,
    occasionId,
    source,
  },
};
---

<AppLayout title="Moje pomysÅ‚y">
  <IdeasView
    client:load
    userId={userId}
    initialIdeas={initialState.ideas}
    initialPagination={initialState.pagination}
    initialFilters={initialState.filters}
    relations={initialState.relations}
    occasions={initialState.occasions}
  />
</AppLayout>

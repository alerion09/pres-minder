/**
 * Shared types for backend and frontend
 *
 * This file contains DTO (Data Transfer Object) and Command Model types
 * that are used across the API layer. All types are derived from the
 * database schema to ensure type safety and consistency.
 */

import type { Tables, TablesInsert, TablesUpdate, Enums } from "./db/database.types";

// ============================================================================
// Entity Types (Direct mappings from database)
// ============================================================================

/**
 * Relation entity - represents relationship types (friend, parent, etc.)
 */
export type Relation = Tables<"relations">;

/**
 * Occasion entity - represents occasion types (birthday, anniversary, etc.)
 */
export type Occasion = Tables<"occasions">;

/**
 * Idea entity - represents a gift idea with full database schema
 */
export type Idea = Tables<"ideas">;

/**
 * Idea source enum - tracks the origin of idea content
 */
export type IdeaSource = Enums<"idea_source">;

// ============================================================================
// DTO Types (API Response objects)
// ============================================================================

/**
 * RelationDTO - Used in GET /api/relations response
 * Direct mapping of relation entity
 */
export type RelationDTO = Relation;

/**
 * OccasionDTO - Used in GET /api/occasions response
 * Direct mapping of occasion entity
 */
export type OccasionDTO = Occasion;

/**
 * IdeaDTO - Enriched idea object with joined relation and occasion names
 * Used in GET /api/ideas, GET /api/ideas/:id, POST /api/ideas, PUT /api/ideas/:id responses
 *
 * Differs from Idea entity by:
 * - Excludes user_id (security: don't expose to client)
 * - Adds relation_name and occasion_name (denormalized for convenience)
 */
export type IdeaDTO = Omit<Idea, "user_id"> & {
  relation_name: string | null;
  occasion_name: string | null;
};

/**
 * IdeaSuggestionDTO - Single AI-generated gift idea suggestion
 * Used in POST /api/ideas/generate response
 */
export interface IdeaSuggestionDTO {
  content: string;
}

/**
 * GenerateIdeaResponseDTO - Response from AI idea generation endpoint
 * Used in POST /api/ideas/generate response
 */
export interface GenerateIdeaResponseDTO {
  suggestions: IdeaSuggestionDTO[];
  metadata: {
    model: string;
    generated_at: string;
  };
}

/**
 * PaginationMetaDTO - Pagination metadata for list endpoints
 */
export interface PaginationMetaDTO {
  page: number;
  limit: number;
  total: number;
  total_pages: number;
}

/**
 * PaginatedIdeasDTO - Paginated list of ideas
 * Used in GET /api/ideas response
 */
export interface PaginatedIdeasDTO {
  data: IdeaDTO[];
  pagination: PaginationMetaDTO;
}

// ============================================================================
// Command Model Types (API Request objects)
// ============================================================================

/**
 * CreateIdeaCommand - Request body for creating a new idea
 * Used in POST /api/ideas
 *
 * Derived from TablesInsert but excludes:
 * - id (auto-generated by database)
 * - created_at, updated_at (auto-generated by database)
 *
 * Makes user_id and source field required with appropriate types
 */
export type CreateIdeaCommand = Omit<TablesInsert<"ideas">, "id" | "created_at" | "updated_at"> & {
  user_id: string;
  source: IdeaSource;
};

/**
 * UpdateIdeaCommand - Request body for updating an existing idea
 * Used in PUT /api/ideas/:id
 *
 * Derived from TablesUpdate but excludes:
 * - id (URL parameter, not in body)
 * - created_at, updated_at (auto-managed by database)
 *
 * Makes user_id required (no authentication currently).
 * All other fields are optional (partial update).
 * Includes source field which is passed from the frontend to track content origin.
 */
export type UpdateIdeaCommand = Omit<TablesUpdate<"ideas">, "id" | "created_at" | "updated_at"> & {
  user_id: string;
};

/**
 * GenerateIdeaCommand - Request body for AI idea generation
 * Used in POST /api/ideas/generate
 *
 * Contains only the fields needed to generate AI suggestions.
 * Does not include name, content, or source as those are generated.
 */
export interface GenerateIdeaCommand {
  age?: number | null;
  interests?: string | null;
  person_description?: string | null;
  budget_min?: number | null;
  budget_max?: number | null;
  relation_id?: number | null;
  occasion_id?: number | null;
}

// ============================================================================
// Query Parameter Types
// ============================================================================

/**
 * GetIdeasQueryParams - Query parameters for GET /api/ideas
 */
export interface GetIdeasQueryParams {
  page?: number;
  limit?: number;
  sort?: "created_at" | "updated_at" | "name";
  order?: "asc" | "desc";
  relation_id?: number;
  occasion_id?: number;
  source?: IdeaSource;
}
